
IR_ObjectDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009a  0080009a  0000055e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ba  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a38  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000330  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075f  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ef  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e0 e9       	ldi	r30, 0x90	; 144
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	aa 39       	cpi	r26, 0x9A	; 154
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	aa e9       	ldi	r26, 0x9A	; 154
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	ab 3a       	cpi	r26, 0xAB	; 171
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  ca:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <main>:


int x;
char a[15];
int main(void )
{
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	LCDinit();
  d8:	0e 94 44 01 	call	0x288	; 0x288 <LCDinit>
	LCDclr( );
  dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDclr>
	ADCinit();// Initializes ADC in 10 bit mode
  e0:	0e 94 c0 00 	call	0x180	; 0x180 <ADCinit>
	DDRB = 0xff; // make port B as output 
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	87 bb       	out	0x17, r24	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	c0 e9       	ldi	r28, 0x90	; 144
  ea:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else
		{
		LCDGotoXY(0,1);				// displays string in 2nd row from 2nd col
		LCDdisplay("Detected          ");
		PORTB = 0xff;
  ec:	1f ef       	ldi	r17, 0xFF	; 255
	LCDclr( );
	ADCinit();// Initializes ADC in 10 bit mode
	DDRB = 0xff; // make port B as output 
	while (1)
	{
		x = read_adc(0);// returns the digital value of the analog i/p connected to pin 0 of port A
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 b6 00 	call	0x16c	; 0x16c <read_adc>
  f4:	90 93 9b 00 	sts	0x009B, r25
  f8:	80 93 9a 00 	sts	0x009A, r24
		
		LCDGotoXY(0,0);				// displays string in 1st row from 3rd col
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDGotoXY>
		LCDdisplay("Object Detector:");
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 14 02 	call	0x428	; 0x428 <LCDdisplay>
 10c:	88 ee       	ldi	r24, 0xE8	; 232
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	fe 01       	movw	r30, r28
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x3e>
		_delay_ms(100);
		
		if(x <= 100)
 11a:	80 91 9a 00 	lds	r24, 0x009A
 11e:	90 91 9b 00 	lds	r25, 0x009B
 122:	85 36       	cpi	r24, 0x65	; 101
 124:	91 05       	cpc	r25, r1
 126:	8c f4       	brge	.+34     	; 0x14a <main+0x78>
		{
		LCDGotoXY(0,1);				// displays string in 2nd row from 2rd col
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDGotoXY>
		LCDdisplay("Not Detected         ");
 130:	81 e7       	ldi	r24, 0x71	; 113
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 14 02 	call	0x428	; 0x428 <LCDdisplay>
		PORTB = 0x00;
 138:	18 ba       	out	0x18, r1	; 24
 13a:	88 eb       	ldi	r24, 0xB8	; 184
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	fe 01       	movw	r30, r28
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <main+0x6c>
 148:	d2 cf       	rjmp	.-92     	; 0xee <main+0x1c>
		

		}
		else
		{
		LCDGotoXY(0,1);				// displays string in 2nd row from 2nd col
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDGotoXY>
		LCDdisplay("Detected          ");
 152:	87 e8       	ldi	r24, 0x87	; 135
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 14 02 	call	0x428	; 0x428 <LCDdisplay>
		PORTB = 0xff;
 15a:	18 bb       	out	0x18, r17	; 24
 15c:	88 eb       	ldi	r24, 0xB8	; 184
 15e:	9b e0       	ldi	r25, 0x0B	; 11
 160:	fe 01       	movw	r30, r28
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 168:	d9 f7       	brne	.-10     	; 0x160 <main+0x8e>
 16a:	c1 cf       	rjmp	.-126    	; 0xee <main+0x1c>

0000016c <read_adc>:
#define ADC_VREF_TYPE 0x40

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input|ADC_VREF_TYPE;
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	87 b9       	out	0x07, r24	; 7
// Start the AD conversion
ADCSRA|=0x40;
 170:	36 9a       	sbi	0x06, 6	; 6
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
 172:	34 9b       	sbis	0x06, 4	; 6
 174:	fe cf       	rjmp	.-4      	; 0x172 <read_adc+0x6>
ADCSRA|=0x10;
 176:	34 9a       	sbi	0x06, 4	; 6
return ADCW;
 178:	24 b1       	in	r18, 0x04	; 4
 17a:	35 b1       	in	r19, 0x05	; 5
}
 17c:	c9 01       	movw	r24, r18
 17e:	08 95       	ret

00000180 <ADCinit>:



void ADCinit()
{
ADMUX=ADC_VREF_TYPE;
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	87 b9       	out	0x07, r24	; 7
ADCSRA=0x85;
 184:	85 e8       	ldi	r24, 0x85	; 133
 186:	86 b9       	out	0x06, r24	; 6
}
 188:	08 95       	ret

0000018a <LCDsendChar>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT
	//8 bit part
	LDP=ch;
 18a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 18c:	95 9a       	sbi	0x12, 5	; 18
	LCP|=1<<LCD_E;		
 18e:	97 9a       	sbi	0x12, 7	; 18
 190:	8a ef       	ldi	r24, 0xFA	; 250
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDsendChar+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 19a:	97 98       	cbi	0x12, 7	; 18
	LCP&=~(1<<LCD_RS);
 19c:	95 98       	cbi	0x12, 5	; 18
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDsendChar+0x14>
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	LDPRS &=~(1<<LCD_RS);
	_delay_ms(1);	
#endif
}
 1a2:	08 95       	ret

000001a4 <LCDsendCommand>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT
	//8 bit part
	LDP=cmd;
 1a4:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 1a6:	97 9a       	sbi	0x12, 7	; 18
 1a8:	8a ef       	ldi	r24, 0xFA	; 250
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDsendCommand+0xa>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1b2:	97 98       	cbi	0x12, 7	; 18
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDsendCommand+0x10>
	LDPE |=1<<LCD_E;		
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}		
 1b8:	08 95       	ret

000001ba <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 1c0:	08 95       	ret

000001c2 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 1c8:	08 95       	ret

000001ca <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	49 f0       	breq	.+18     	; 0x1ea <LCDstring+0x20>
 1d8:	ec 01       	movw	r28, r24
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1de:	89 91       	ld	r24, Y+
 1e0:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	10 17       	cp	r17, r16
 1e8:	d0 f3       	brcs	.-12     	; 0x1de <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1f4:	62 30       	cpi	r22, 0x02	; 2
 1f6:	31 f0       	breq	.+12     	; 0x204 <LCDGotoXY+0x10>
 1f8:	63 30       	cpi	r22, 0x03	; 3
 1fa:	31 f0       	breq	.+12     	; 0x208 <LCDGotoXY+0x14>
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	29 f4       	brne	.+10     	; 0x20a <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 200:	80 5c       	subi	r24, 0xC0	; 192
 202:	03 c0       	rjmp	.+6      	; 0x20a <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 204:	8c 5e       	subi	r24, 0xEC	; 236
 206:	01 c0       	rjmp	.+2      	; 0x20a <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 208:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
	
}
 210:	08 95       	ret

00000212 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 21c:	64 2f       	mov	r22, r20
 21e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCDGotoXY>
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	03 c0       	rjmp	.+6      	; 0x22c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 226:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 22a:	1f 5f       	subi	r17, 0xFF	; 255
 22c:	fe 01       	movw	r30, r28
 22e:	e1 0f       	add	r30, r17
 230:	f1 1d       	adc	r31, r1
 232:	84 91       	lpm	r24, Z+
 234:	88 23       	and	r24, r24
 236:	b9 f7       	brne	.-18     	; 0x226 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	7c 01       	movw	r14, r24
 24e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 250:	11 0f       	add	r17, r17
 252:	11 0f       	add	r17, r17
 254:	11 0f       	add	r17, r17
 256:	10 64       	ori	r17, 0x40	; 64
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 25c:	f7 01       	movw	r30, r14
 25e:	ec 0f       	add	r30, r28
 260:	fd 1f       	adc	r31, r29
 262:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 264:	81 2f       	mov	r24, r17
 266:	8c 0f       	add	r24, r28
 268:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
		LCDsendChar(pcc);
 26c:	80 2f       	mov	r24, r16
 26e:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	c8 30       	cpi	r28, 0x08	; 8
 276:	d1 05       	cpc	r29, r1
 278:	89 f7       	brne	.-30     	; 0x25c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	08 95       	ret

00000288 <LCDinit>:
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    else LDPD0 &=~(1<<LCD_D0);			
}
#endif
void LCDinit(void)//Initializes LCD
{
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	86 ea       	ldi	r24, 0xA6	; 166
 290:	9e e0       	ldi	r25, 0x0E	; 14
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCDinit+0xa>
#endif
#ifdef LCD_8BIT
	//8 bit part
	_delay_ms(15);
	//zero to datapins
	LDP =0x00;
 296:	15 ba       	out	0x15, r1	; 21
	//zero to control pins
	LCP &=(1<<LCD_E|1<<LCD_RW|1<<LCD_RS);
 298:	82 b3       	in	r24, 0x12	; 18
 29a:	80 7e       	andi	r24, 0xE0	; 224
 29c:	82 bb       	out	0x12, r24	; 18
	//set direction pins for data and control
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 29e:	84 b3       	in	r24, 0x14	; 20
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	84 bb       	out	0x14, r24	; 20
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2a4:	81 b3       	in	r24, 0x11	; 17
 2a6:	80 6e       	ori	r24, 0xE0	; 224
 2a8:	81 bb       	out	0x11, r24	; 17
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 2aa:	20 e3       	ldi	r18, 0x30	; 48
 2ac:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2ae:	97 9a       	sbi	0x12, 7	; 18
 2b0:	8a ef       	ldi	r24, 0xFA	; 250
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCDinit+0x2e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2ba:	97 98       	cbi	0x12, 7	; 18
 2bc:	fc 01       	movw	r30, r24
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCDinit+0x36>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 2c2:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2c4:	97 9a       	sbi	0x12, 7	; 18
 2c6:	fc 01       	movw	r30, r24
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCDinit+0x40>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2cc:	97 98       	cbi	0x12, 7	; 18
 2ce:	fc 01       	movw	r30, r24
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCDinit+0x48>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 2d4:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2d6:	97 9a       	sbi	0x12, 7	; 18
 2d8:	fc 01       	movw	r30, r24
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCDinit+0x52>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2de:	97 98       	cbi	0x12, 7	; 18
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCDinit+0x58>
	_delay_ms(1);
	//--------8 bit dual line----------
	LCDsendCommand(0b00111000); //8 bit mode
 2e4:	88 e3       	ldi	r24, 0x38	; 56
 2e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1); */
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
 2f0:	c4 e5       	ldi	r28, 0x54	; 84
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	60 e0       	ldi	r22, 0x00	; 0
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2f6:	16 2f       	mov	r17, r22
 2f8:	1f 5f       	subi	r17, 0xFF	; 255
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 20 01 	call	0x240	; 0x240 <LCDdefinechar>
 300:	28 96       	adiw	r28, 0x08	; 8
 302:	61 2f       	mov	r22, r17
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 304:	18 30       	cpi	r17, 0x08	; 8
 306:	b9 f7       	brne	.-18     	; 0x2f6 <LCDinit+0x6e>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	08 2f       	mov	r16, r24
 316:	10 e0       	ldi	r17, 0x00	; 0
 318:	04 c0       	rjmp	.+8      	; 0x322 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 31a:	8e e1       	ldi	r24, 0x1E	; 30
 31c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 320:	1f 5f       	subi	r17, 0xFF	; 255
 322:	10 17       	cp	r17, r16
 324:	d0 f3       	brcs	.-12     	; 0x31a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	08 2f       	mov	r16, r24
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	04 c0       	rjmp	.+8      	; 0x33e <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 336:	88 e1       	ldi	r24, 0x18	; 24
 338:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 33c:	1f 5f       	subi	r17, 0xFF	; 255
 33e:	10 17       	cp	r17, r16
 340:	d0 f3       	brcs	.-12     	; 0x336 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 348:	8e e0       	ldi	r24, 0x0E	; 14
 34a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 34e:	08 95       	ret

00000350 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 350:	8f e0       	ldi	r24, 0x0F	; 15
 352:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 356:	08 95       	ret

00000358 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 358:	8c e0       	ldi	r24, 0x0C	; 12
 35a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 35e:	08 95       	ret

00000360 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 366:	08 95       	ret

00000368 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
}
 36e:	08 95       	ret

00000370 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	08 2f       	mov	r16, r24
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	04 c0       	rjmp	.+8      	; 0x382 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 37a:	80 e1       	ldi	r24, 0x10	; 16
 37c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 380:	1f 5f       	subi	r17, 0xFF	; 255
 382:	10 17       	cp	r17, r16
 384:	d0 f3       	brcs	.-12     	; 0x37a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	08 2f       	mov	r16, r24
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	04 c0       	rjmp	.+8      	; 0x39e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 396:	84 e1       	ldi	r24, 0x14	; 20
 398:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 39c:	1f 5f       	subi	r17, 0xFF	; 255
 39e:	10 17       	cp	r17, r16
 3a0:	d0 f3       	brcs	.-12     	; 0x396 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <LCDprogressBar>:
{
	LCDstring(arr,strlen(arr));
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3b8:	96 e0       	ldi	r25, 0x06	; 6
 3ba:	89 9f       	mul	r24, r25
 3bc:	c0 01       	movw	r24, r0
 3be:	11 24       	eor	r1, r1
 3c0:	24 2f       	mov	r18, r20
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	ac 01       	movw	r20, r24
 3c6:	42 9f       	mul	r20, r18
 3c8:	c0 01       	movw	r24, r0
 3ca:	43 9f       	mul	r20, r19
 3cc:	90 0d       	add	r25, r0
 3ce:	52 9f       	mul	r21, r18
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 33 02 	call	0x466	; 0x466 <__divmodhi4>
 3da:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3dc:	cb 01       	movw	r24, r22
 3de:	66 e0       	ldi	r22, 0x06	; 6
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__udivmodhi4>
 3e6:	e8 2e       	mov	r14, r24
 3e8:	ff 24       	eor	r15, r15
 3ea:	00 e0       	ldi	r16, 0x00	; 0
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3f0:	c8 01       	movw	r24, r16
 3f2:	05 96       	adiw	r24, 0x05	; 5
 3f4:	c8 17       	cp	r28, r24
 3f6:	d9 07       	cpc	r29, r25
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <LCDprogressBar+0x56>
 3fa:	85 e0       	ldi	r24, 0x05	; 5
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3fe:	c0 17       	cp	r28, r16
 400:	d1 07       	cpc	r29, r17
 402:	10 f0       	brcs	.+4      	; 0x408 <LCDprogressBar+0x60>
 404:	8e 2d       	mov	r24, r14
 406:	01 c0       	rjmp	.+2      	; 0x40a <LCDprogressBar+0x62>
 408:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 40a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 40e:	f3 94       	inc	r15
 410:	0a 5f       	subi	r16, 0xFA	; 250
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	fd 14       	cp	r15, r13
 416:	60 f3       	brcs	.-40     	; 0x3f0 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	08 95       	ret

00000428 <LCDdisplay>:
		LCDsendCommand(0x14);
	}
}
void LCDdisplay(char arr[])
{
	LCDstring(arr,strlen(arr));
 428:	dc 01       	movw	r26, r24
 42a:	0d 90       	ld	r0, X+
 42c:	00 20       	and	r0, r0
 42e:	e9 f7       	brne	.-6      	; 0x42a <LCDdisplay+0x2>
 430:	11 97       	sbiw	r26, 0x01	; 1
 432:	a8 1b       	sub	r26, r24
 434:	b9 0b       	sbc	r27, r25
 436:	6a 2f       	mov	r22, r26
 438:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCDstring>
}
 43c:	08 95       	ret

0000043e <__udivmodhi4>:
 43e:	aa 1b       	sub	r26, r26
 440:	bb 1b       	sub	r27, r27
 442:	51 e1       	ldi	r21, 0x11	; 17
 444:	07 c0       	rjmp	.+14     	; 0x454 <__udivmodhi4_ep>

00000446 <__udivmodhi4_loop>:
 446:	aa 1f       	adc	r26, r26
 448:	bb 1f       	adc	r27, r27
 44a:	a6 17       	cp	r26, r22
 44c:	b7 07       	cpc	r27, r23
 44e:	10 f0       	brcs	.+4      	; 0x454 <__udivmodhi4_ep>
 450:	a6 1b       	sub	r26, r22
 452:	b7 0b       	sbc	r27, r23

00000454 <__udivmodhi4_ep>:
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	5a 95       	dec	r21
 45a:	a9 f7       	brne	.-22     	; 0x446 <__udivmodhi4_loop>
 45c:	80 95       	com	r24
 45e:	90 95       	com	r25
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	08 95       	ret

00000466 <__divmodhi4>:
 466:	97 fb       	bst	r25, 7
 468:	09 2e       	mov	r0, r25
 46a:	07 26       	eor	r0, r23
 46c:	0a d0       	rcall	.+20     	; 0x482 <__divmodhi4_neg1>
 46e:	77 fd       	sbrc	r23, 7
 470:	04 d0       	rcall	.+8      	; 0x47a <__divmodhi4_neg2>
 472:	e5 df       	rcall	.-54     	; 0x43e <__udivmodhi4>
 474:	06 d0       	rcall	.+12     	; 0x482 <__divmodhi4_neg1>
 476:	00 20       	and	r0, r0
 478:	1a f4       	brpl	.+6      	; 0x480 <__divmodhi4_exit>

0000047a <__divmodhi4_neg2>:
 47a:	70 95       	com	r23
 47c:	61 95       	neg	r22
 47e:	7f 4f       	sbci	r23, 0xFF	; 255

00000480 <__divmodhi4_exit>:
 480:	08 95       	ret

00000482 <__divmodhi4_neg1>:
 482:	f6 f7       	brtc	.-4      	; 0x480 <__divmodhi4_exit>
 484:	90 95       	com	r25
 486:	81 95       	neg	r24
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
