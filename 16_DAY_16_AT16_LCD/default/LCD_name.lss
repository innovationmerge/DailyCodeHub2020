
LCD_name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000041c  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000183  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000909  00000000  00000000  00000671  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000029b  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000064c  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000269  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000564  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ec e1       	ldi	r30, 0x1C	; 28
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	ae 37       	cpi	r26, 0x7E	; 126
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"lcd_lib.h"

int main (void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	int i;
	DDRC = 255;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	LCDinit();
  ca:	0e 94 0a 01 	call	0x214	; 0x214 <LCDinit>
	LCDcursorOFF();
  ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCDcursorOFF>
	LCDclr();
  d2:	0e 94 a3 00 	call	0x146	; 0x146 <LCDclr>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	84 ed       	ldi	r24, 0xD4	; 212
  d8:	90 e3       	ldi	r25, 0x30	; 48
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x18>
	_delay_ms(50);
	LCDhome();
  de:	0e 94 a7 00 	call	0x14e	; 0x14e <LCDhome>
  e2:	c9 e1       	ldi	r28, 0x19	; 25
  e4:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		
			LCDGotoXY(0, 0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	0e 94 c0 00 	call	0x180	; 0x180 <LCDGotoXY>
			LCDdisplay("iNNovationMerge");
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDdisplay>
			LCDGotoXY(0, 1);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	0e 94 c0 00 	call	0x180	; 0x180 <LCDGotoXY>
			LCDdisplay("ATMEGA16 LCD");
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDdisplay>
 106:	88 e8       	ldi	r24, 0x88	; 136
 108:	93 e1       	ldi	r25, 0x13	; 19
 10a:	fe 01       	movw	r30, r28
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x48>
 114:	e8 cf       	rjmp	.-48     	; 0xe6 <main+0x24>

00000116 <LCDsendChar>:
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT
	//8 bit part
	LDP=ch;
 116:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 118:	95 9a       	sbi	0x12, 5	; 18
	LCP|=1<<LCD_E;		
 11a:	97 9a       	sbi	0x12, 7	; 18
 11c:	8a ef       	ldi	r24, 0xFA	; 250
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDsendChar+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 126:	97 98       	cbi	0x12, 7	; 18
	LCP&=~(1<<LCD_RS);
 128:	95 98       	cbi	0x12, 5	; 18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDsendChar+0x14>
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	LDPRS &=~(1<<LCD_RS);
	_delay_ms(1);	
#endif
}
 12e:	08 95       	ret

00000130 <LCDsendCommand>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#endif
#ifdef LCD_8BIT
	//8 bit part
	LDP=cmd;
 130:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 132:	97 9a       	sbi	0x12, 7	; 18
 134:	8a ef       	ldi	r24, 0xFA	; 250
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDsendCommand+0xa>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 13e:	97 98       	cbi	0x12, 7	; 18
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendCommand+0x10>
	LDPE |=1<<LCD_E;		
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}		
 144:	08 95       	ret

00000146 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 14c:	08 95       	ret

0000014e <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 154:	08 95       	ret

00000156 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	49 f0       	breq	.+18     	; 0x176 <LCDstring+0x20>
 164:	ec 01       	movw	r28, r24
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	04 c0       	rjmp	.+8      	; 0x172 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 16a:	89 91       	ld	r24, Y+
 16c:	0e 94 8b 00 	call	0x116	; 0x116 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	10 17       	cp	r17, r16
 174:	d0 f3       	brcs	.-12     	; 0x16a <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 180:	62 30       	cpi	r22, 0x02	; 2
 182:	31 f0       	breq	.+12     	; 0x190 <LCDGotoXY+0x10>
 184:	63 30       	cpi	r22, 0x03	; 3
 186:	31 f0       	breq	.+12     	; 0x194 <LCDGotoXY+0x14>
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	29 f4       	brne	.+10     	; 0x196 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 18c:	80 5c       	subi	r24, 0xC0	; 192
 18e:	03 c0       	rjmp	.+6      	; 0x196 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 190:	8c 5e       	subi	r24, 0xEC	; 236
 192:	01 c0       	rjmp	.+2      	; 0x196 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 194:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 196:	80 68       	ori	r24, 0x80	; 128
 198:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
	
}
 19c:	08 95       	ret

0000019e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 1a8:	64 2f       	mov	r22, r20
 1aa:	0e 94 c0 00 	call	0x180	; 0x180 <LCDGotoXY>
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1b2:	0e 94 8b 00 	call	0x116	; 0x116 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1b6:	1f 5f       	subi	r17, 0xFF	; 255
 1b8:	fe 01       	movw	r30, r28
 1ba:	e1 0f       	add	r30, r17
 1bc:	f1 1d       	adc	r31, r1
 1be:	84 91       	lpm	r24, Z+
 1c0:	88 23       	and	r24, r24
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

000001cc <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	7c 01       	movw	r14, r24
 1da:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1dc:	11 0f       	add	r17, r17
 1de:	11 0f       	add	r17, r17
 1e0:	11 0f       	add	r17, r17
 1e2:	10 64       	ori	r17, 0x40	; 64
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1e8:	f7 01       	movw	r30, r14
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 1f0:	81 2f       	mov	r24, r17
 1f2:	8c 0f       	add	r24, r28
 1f4:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendChar(pcc);
 1f8:	80 2f       	mov	r24, r16
 1fa:	0e 94 8b 00 	call	0x116	; 0x116 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	c8 30       	cpi	r28, 0x08	; 8
 202:	d1 05       	cpc	r29, r1
 204:	89 f7       	brne	.-30     	; 0x1e8 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <LCDinit>:
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    else LDPD0 &=~(1<<LCD_D0);			
}
#endif
void LCDinit(void)//Initializes LCD
{
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	86 ea       	ldi	r24, 0xA6	; 166
 21c:	9e e0       	ldi	r25, 0x0E	; 14
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDinit+0xa>
#endif
#ifdef LCD_8BIT
	//8 bit part
	_delay_ms(15);
	//zero to datapins
	LDP =0x00;
 222:	15 ba       	out	0x15, r1	; 21
	//zero to control pins
	LCP &=(1<<LCD_E|1<<LCD_RW|1<<LCD_RS);
 224:	82 b3       	in	r24, 0x12	; 18
 226:	80 7e       	andi	r24, 0xE0	; 224
 228:	82 bb       	out	0x12, r24	; 18
	//set direction pins for data and control
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 22a:	84 b3       	in	r24, 0x14	; 20
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	84 bb       	out	0x14, r24	; 20
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 230:	81 b3       	in	r24, 0x11	; 17
 232:	80 6e       	ori	r24, 0xE0	; 224
 234:	81 bb       	out	0x11, r24	; 17
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 236:	20 e3       	ldi	r18, 0x30	; 48
 238:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 23a:	97 9a       	sbi	0x12, 7	; 18
 23c:	8a ef       	ldi	r24, 0xFA	; 250
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDinit+0x2e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 246:	97 98       	cbi	0x12, 7	; 18
 248:	fc 01       	movw	r30, r24
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDinit+0x36>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 24e:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 250:	97 9a       	sbi	0x12, 7	; 18
 252:	fc 01       	movw	r30, r24
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCDinit+0x40>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 258:	97 98       	cbi	0x12, 7	; 18
 25a:	fc 01       	movw	r30, r24
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDinit+0x48>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 260:	25 bb       	out	0x15, r18	; 21
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 262:	97 9a       	sbi	0x12, 7	; 18
 264:	fc 01       	movw	r30, r24
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCDinit+0x52>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 26a:	97 98       	cbi	0x12, 7	; 18
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCDinit+0x58>
	_delay_ms(1);
	//--------8 bit dual line----------
	LCDsendCommand(0b00111000); //8 bit mode
 270:	88 e3       	ldi	r24, 0x38	; 56
 272:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1); */
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 276:	8c e0       	ldi	r24, 0x0C	; 12
 278:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
 27c:	c4 e5       	ldi	r28, 0x54	; 84
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	60 e0       	ldi	r22, 0x00	; 0
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 282:	16 2f       	mov	r17, r22
 284:	1f 5f       	subi	r17, 0xFF	; 255
 286:	ce 01       	movw	r24, r28
 288:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCDdefinechar>
 28c:	28 96       	adiw	r28, 0x08	; 8
 28e:	61 2f       	mov	r22, r17
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 290:	18 30       	cpi	r17, 0x08	; 8
 292:	b9 f7       	brne	.-18     	; 0x282 <LCDinit+0x6e>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	08 2f       	mov	r16, r24
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 2a6:	8e e1       	ldi	r24, 0x1E	; 30
 2a8:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 2ac:	1f 5f       	subi	r17, 0xFF	; 255
 2ae:	10 17       	cp	r17, r16
 2b0:	d0 f3       	brcs	.-12     	; 0x2a6 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	08 2f       	mov	r16, r24
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 2c2:	88 e1       	ldi	r24, 0x18	; 24
 2c4:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 2c8:	1f 5f       	subi	r17, 0xFF	; 255
 2ca:	10 17       	cp	r17, r16
 2cc:	d0 f3       	brcs	.-12     	; 0x2c2 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 2d4:	8e e0       	ldi	r24, 0x0E	; 14
 2d6:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 2da:	08 95       	ret

000002dc <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 2e2:	08 95       	ret

000002e4 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 2e4:	8c e0       	ldi	r24, 0x0C	; 12
 2e6:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 2ea:	08 95       	ret

000002ec <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 2f2:	08 95       	ret

000002f4 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
}
 2fa:	08 95       	ret

000002fc <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	08 2f       	mov	r16, r24
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	04 c0       	rjmp	.+8      	; 0x30e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 306:	80 e1       	ldi	r24, 0x10	; 16
 308:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 30c:	1f 5f       	subi	r17, 0xFF	; 255
 30e:	10 17       	cp	r17, r16
 310:	d0 f3       	brcs	.-12     	; 0x306 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	08 2f       	mov	r16, r24
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	0e 94 98 00 	call	0x130	; 0x130 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 328:	1f 5f       	subi	r17, 0xFF	; 255
 32a:	10 17       	cp	r17, r16
 32c:	d0 f3       	brcs	.-12     	; 0x322 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <LCDprogressBar>:
{
	LCDstring(arr,strlen(arr));
}
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 344:	96 e0       	ldi	r25, 0x06	; 6
 346:	89 9f       	mul	r24, r25
 348:	c0 01       	movw	r24, r0
 34a:	11 24       	eor	r1, r1
 34c:	24 2f       	mov	r18, r20
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	42 9f       	mul	r20, r18
 354:	c0 01       	movw	r24, r0
 356:	43 9f       	mul	r20, r19
 358:	90 0d       	add	r25, r0
 35a:	52 9f       	mul	r21, r18
 35c:	90 0d       	add	r25, r0
 35e:	11 24       	eor	r1, r1
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__divmodhi4>
 366:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 368:	cb 01       	movw	r24, r22
 36a:	66 e0       	ldi	r22, 0x06	; 6
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__udivmodhi4>
 372:	e8 2e       	mov	r14, r24
 374:	ff 24       	eor	r15, r15
 376:	00 e0       	ldi	r16, 0x00	; 0
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 37c:	c8 01       	movw	r24, r16
 37e:	05 96       	adiw	r24, 0x05	; 5
 380:	c8 17       	cp	r28, r24
 382:	d9 07       	cpc	r29, r25
 384:	10 f0       	brcs	.+4      	; 0x38a <LCDprogressBar+0x56>
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	06 c0       	rjmp	.+12     	; 0x396 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 38a:	c0 17       	cp	r28, r16
 38c:	d1 07       	cpc	r29, r17
 38e:	10 f0       	brcs	.+4      	; 0x394 <LCDprogressBar+0x60>
 390:	8e 2d       	mov	r24, r14
 392:	01 c0       	rjmp	.+2      	; 0x396 <LCDprogressBar+0x62>
 394:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 396:	0e 94 8b 00 	call	0x116	; 0x116 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 39a:	f3 94       	inc	r15
 39c:	0a 5f       	subi	r16, 0xFA	; 250
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	fd 14       	cp	r15, r13
 3a2:	60 f3       	brcs	.-40     	; 0x37c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	08 95       	ret

000003b4 <LCDdisplay>:
		LCDsendCommand(0x14);
	}
}
void LCDdisplay(char arr[])
{
	LCDstring(arr,strlen(arr));
 3b4:	dc 01       	movw	r26, r24
 3b6:	0d 90       	ld	r0, X+
 3b8:	00 20       	and	r0, r0
 3ba:	e9 f7       	brne	.-6      	; 0x3b6 <LCDdisplay+0x2>
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	a8 1b       	sub	r26, r24
 3c0:	b9 0b       	sbc	r27, r25
 3c2:	6a 2f       	mov	r22, r26
 3c4:	0e 94 ab 00 	call	0x156	; 0x156 <LCDstring>
}
 3c8:	08 95       	ret

000003ca <__udivmodhi4>:
 3ca:	aa 1b       	sub	r26, r26
 3cc:	bb 1b       	sub	r27, r27
 3ce:	51 e1       	ldi	r21, 0x11	; 17
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <__udivmodhi4_ep>

000003d2 <__udivmodhi4_loop>:
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	a6 17       	cp	r26, r22
 3d8:	b7 07       	cpc	r27, r23
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <__udivmodhi4_ep>
 3dc:	a6 1b       	sub	r26, r22
 3de:	b7 0b       	sbc	r27, r23

000003e0 <__udivmodhi4_ep>:
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	5a 95       	dec	r21
 3e6:	a9 f7       	brne	.-22     	; 0x3d2 <__udivmodhi4_loop>
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	08 95       	ret

000003f2 <__divmodhi4>:
 3f2:	97 fb       	bst	r25, 7
 3f4:	09 2e       	mov	r0, r25
 3f6:	07 26       	eor	r0, r23
 3f8:	0a d0       	rcall	.+20     	; 0x40e <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	04 d0       	rcall	.+8      	; 0x406 <__divmodhi4_neg2>
 3fe:	e5 df       	rcall	.-54     	; 0x3ca <__udivmodhi4>
 400:	06 d0       	rcall	.+12     	; 0x40e <__divmodhi4_neg1>
 402:	00 20       	and	r0, r0
 404:	1a f4       	brpl	.+6      	; 0x40c <__divmodhi4_exit>

00000406 <__divmodhi4_neg2>:
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255

0000040c <__divmodhi4_exit>:
 40c:	08 95       	ret

0000040e <__divmodhi4_neg1>:
 40e:	f6 f7       	brtc	.-4      	; 0x40c <__divmodhi4_exit>
 410:	90 95       	com	r25
 412:	81 95       	neg	r24
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
